<?xml version="1.0"?>
<azure id = "MineEth">          
           
 <setting id = "LIST">{"requests":[{"content":{"query":"resources|where type =~ 'microsoft.compute/virtualMachines'\r\n    | extend nics=array_length(properties.networkProfile.networkInterfaces)\r\n    | mvexpand nic=properties.networkProfile.networkInterfaces limit 400\r\n    | where nics == 1 or nic.properties.primary =~ 'true' or isempty(nic)\r\n    | project\r\n        id,\r\n        name,\r\n        resourceGroup,\r\n        type,\r\n        kind,\r\n        location,\r\n        edgeZone = iff(tostring(extendedLocation.type) =~ 'EdgeZone', tostring(extendedLocation.name), '-'),\r\n        subscriptionId,\r\n        tags,\r\n        licenseType=case(\r\n            properties.licenseType =~ 'Windows_Server', 'Azure Hybrid Benefit for Windows',\r\n            properties.licenseType =~ 'Windows_Client', 'Windows client with multi-tenant hosting',\r\n            properties.licenseType =~ 'RHEL_BYOS', 'Azure Hybrid Benefit for Redhat',\r\n            properties.licenseType =~ 'SLES_BYOS', 'Azure Hybrid Benefit for SUSE',\r\n            'Not enabled'\r\n        ),\r\n        nics = coalesce(tostring(nics), '-'),\r\n        zones = coalesce(tostring(zones[0]), '-'),\r\n        os = case(\r\n            properties.storageProfile.osDisk.osType =~ 'Windows', 'Windows',\r\n            properties.storageProfile.osDisk.osType =~ 'Linux', 'Linux',\r\n            '-'\r\n        ),\r\n        publisher = coalesce(\r\n            tostring(properties.storageProfile.imageReference.publisher),\r\n            '-'\r\n        ),\r\n        offer = coalesce(\r\n            tostring(properties.storageProfile.imageReference.offer),\r\n            '-'\r\n        ),\r\n        sku = coalesce(\r\n            tostring(properties.storageProfile.imageReference.sku),\r\n            '-'\r\n        ),\r\n        usesManagedDisks = iff(\r\n            isnotempty(properties.storageProfile.osDisk.managedDisk), 'Yes',\r\n            'No'\r\n        ),\r\n        disks = coalesce(\r\n            tostring(\r\n                iff(isnotempty(properties.storageProfile.osDisk) and isnotnull(properties.storageProfile.osDisk), 1, 0) + coalesce(array_length(properties.storageProfile.dataDisks), 0)\r\n            ),\r\n            '-'\r\n        ),\r\n        source = coalesce(\r\n            case(\r\n                (isnotnull(properties.storageProfile.imageReference.publisher) and isnotempty(properties.storageProfile.imageReference.publisher)), 'Marketplace',\r\n                (isnotnull(properties.storageProfile.imageReference.id) and isnotempty(properties.storageProfile.imageReference.id) and properties.storageProfile.imageReference contains \"Microsoft.Compute/images\"), 'Image',\r\n                (isnotnull(properties.storageProfile.imageReference.id) and isnotempty(properties.storageProfile.imageReference.id) and properties.storageProfile.imageReference contains \"Microsoft.Compute/galleries\"), 'Shared image',\r\n                'Disk'\r\n            ),\r\n            '-'\r\n        ),\r\n        spotEvictionPolicy = case(\r\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\") and properties.evictionPolicy =~ \"Deallocate\", 'Stop / Deallocate',\r\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\"), 'Delete',\r\n            '-'\r\n        ),\r\n        spotEvictionType = case(\r\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\") and properties.billingProfile.maxPrice == -1, 'Capacity',\r\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\"), 'Price or capacity',\r\n            '-'\r\n        ),\r\n        spotPrice = case(\r\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\") and isnotnull(properties.billingProfile.maxPrice) and isnotempty(properties.billingProfile.maxPrice) and properties.billingProfile.maxPrice != -1, strcat(\"$ \", round(toreal(properties.billingProfile.maxPrice), 2)),\r\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\") and (isnull(properties.billingProfile.maxPrice) or isempty(properties.billingProfile.maxPrice)), 'Capacity',\r\n            '-'\r\n        ),\r\n        proximityPlacementGroup = coalesce(extract('/proximityPlacementGroups/(.*)', 1, tostring(properties.proximityPlacementGroup.id)), '-'),\r\n        host = coalesce(extract('/hosts/(.*)', 1, tostring(properties.host.id)), '-'),\r\n        availabilitySet = coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), '-'),\r\n        vmSize = coalesce(tostring(properties.hardwareProfile.vmSize), '-'),\r\n        computerName = coalesce(tostring(properties.osProfile.computerName), '-'),\r\n        hyperVGeneration = coalesce(tostring(properties.extended.instanceView.hyperVGeneration), '-'),\r\n        securityType = case(\r\n            isnull(properties.securityProfile.securityType) or (properties.securityProfile.securityType =~ \"Standard\"), 'Standard',\r\n            properties.securityProfile.securityType =~ \"TrustedLaunch\", 'Trusted launch',\r\n            properties.securityProfile.securityType =~ \"ConfidentialVm\", 'Confidential',\r\n            '-'\r\n        ),\r\n        nicId = tostring(tolower(nic.id)),\r\n        powerState = tostring(split(tolower(properties.extended.instanceView.powerState.code), \"powerstate/\")[1]),\r\n        provisioningState = tostring(properties.provisioningState),\r\n\t\tscaleSet = coalesce(extract('/virtualMachineScaleSets/(.*)', 1, tostring(properties.virtualMachineScaleSet.id)), '-')\r\n    | join kind=leftouter hint.strategy=shuffle (data \r\n            | where type =~ 'Microsoft.Network/networkInterfaces' \r\n            | extend ipConfigsCount=array_length(properties.ipConfigurations) \r\n            | mvexpand ipconfig=properties.ipConfigurations limit 400\r\n            | where ipConfigsCount == 1 or ipconfig.properties.primary =~ 'true' \r\n            | parse kind=regex tostring(ipconfig.properties.subnet.id) with '/virtualNetworks/' virtualNetwork '/subnets/' subnet \r\n            | project\r\n                nicId=tolower(id),\r\n                publicIpId=tostring(ipconfig.properties.publicIPAddress.id),\r\n                privateIPAddress=tostring(ipconfig.properties.privateIPAddress),\r\n                subnet,\r\n                virtualNetwork,\r\n                lbReferences=array_concat(\r\n                    ipconfig.properties.loadBalancerInboundNatRules,\r\n                    ipconfig.properties.loadBalancerBackendAddressPools,\r\n                    ipconfig.properties.applicationGatewayBackendAddressPools))\r\n        on nicId \r\n    | project-away nicId, nicId1 \r\n    | mvexpand lbRef=lbReferences limit 400\r\n    | extend lbId=tolower(extract('(.*)/(inboundNatRules|backendAddressPool)', 1, tostring(lbRef.id)))\r\n    | summarize tags = any(tags) by id, lbId, name, resourceGroup, type, kind, location, subscriptionId, licenseType, nics, zones, os, usesManagedDisks, publicIpId, disks, source, spotEvictionPolicy, spotEvictionType, spotPrice, proximityPlacementGroup, host, availabilitySet, vmSize, securityType, privateIPAddress, subnet, virtualNetwork, powerState, provisioningState, scaleSet, edgeZone, computerName, hyperVGeneration, publisher, offer, sku\r\n    | join kind=leftouter hint.strategy=shuffle (data \r\n            | where type =~ 'microsoft.network/loadbalancers' or type =~ 'microsoft.network/applicationgateways' \r\n            | mvexpand fipc=properties.frontendIPConfigurations limit 400\r\n            | summarize lbPublicIpId=any(tostring(fipc.properties.publicIPAddress.id)) by lbId=tolower(id))\r\n        on lbId \r\n    | summarize lbPublicIpId=any(lbPublicIpId), tags = any(tags) by id, name, resourceGroup, type, kind, location, subscriptionId, licenseType, nics, zones, os, usesManagedDisks, publicIpId, disks, source, spotEvictionPolicy, spotEvictionType, spotPrice, proximityPlacementGroup, host, availabilitySet, vmSize, securityType, privateIPAddress, subnet, virtualNetwork, powerState, provisioningState, scaleSet, edgeZone, computerName, hyperVGeneration, publisher, offer, sku\r\n    | extend publicIpId=tolower(iff(isnotempty(publicIpId), publicIpId, lbPublicIpId))\r\n    | project-away lbPublicIpId \r\n    | join kind=leftouter hint.strategy=shuffle (data \r\n            | where type =~ 'microsoft.network/publicipaddresses' \r\n            | project publicIpId=tolower(id), publicIpAddress=tostring(properties.ipAddress), publicDnsName=tostring(properties.dnsSettings.fqdn))\r\n        on publicIpId \r\n    | project-away publicIpId, publicIpId1\r\n    | project id,\r\n        name,\r\n        resourceGroup,\r\n        type,\r\n        kind,\r\n        location,\r\n        subscriptionId,\r\n        tags,\r\n        nics,\r\n        os,\r\n        publisher,\r\n        offer,\r\n        sku,\r\n        status = case(\r\n            provisioningState =~ 'CREATING', 'Creating',\r\n            provisioningState =~ 'DELETING', 'Deleting',\r\n            (provisioningState =~ 'FAILED' and isnotnull(powerState) and isnotempty(powerState)), case(\r\n                powerState =~ 'RUNNING', 'Running',\r\n                powerState =~ 'STOPPED', 'Stopped',\r\n                powerState =~ 'DEALLOCATED', 'Stopped (deallocated)',\r\n                'Unknown'\r\n            ),\r\n            provisioningState =~ 'FAILED', 'Failed',\r\n            (provisioningState =~ 'SUCCEEDED' and isnotnull(powerState) and isnotempty(powerState)), case(\r\n                powerState =~ 'RUNNING', 'Running',\r\n                powerState =~ 'STOPPED', 'Stopped',\r\n                powerState =~ 'DEALLOCATED', 'Stopped (deallocated)',\r\n                powerState =~ 'STARTING', 'Starting',\r\n                'Unknown'\r\n            ),\r\n            (provisioningState =~ 'UPDATING' and isnotnull(powerState) and isnotempty(powerState)), case(\r\n                powerState =~ 'DEALLOCATING', 'Deallocating',\r\n                powerState =~ 'RUNNING', 'Running',\r\n                powerState =~ 'STARTING', 'Starting',\r\n                powerState =~ 'STOPPING', 'Stopping',\r\n                'Updating'\r\n            ),\r\n            'Unknown'\r\n        ),\r\n        disks,\r\n        availabilitySet,\r\n        vmSize,\r\n        securityType,\r\n        virtualNetwork = coalesce(virtualNetwork, '-'),\r\n        subnet = coalesce(subnet, '-'),\r\n        privateIPAddress = coalesce(privateIPAddress, '-'),\r\n        publicDnsName = coalesce(publicDnsName, '-'),\r\n        publicIpAddress = coalesce(publicIpAddress, '-'),\r\n        zones,\r\n        usesManagedDisks,\r\n        licenseType,\r\n        source,\r\n        spotEvictionPolicy,\r\n        spotEvictionType,\r\n        spotPrice,\r\n        proximityPlacementGroup,\r\n        host,\r\n\t\tscaleSet = coalesce(scaleSet, '-'),\r\n\t\tedgeZone = coalesce(edgeZone, '-'),\r\n        computerName,\r\n        hyperVGeneration\r\n|extend subscriptionDisplayName=case(subscriptionId =~ '{SUBID}','Azure for Students',subscriptionId)|extend locationDisplayName=case(location =~ 'eastus','East US',location =~ 'eastus2','East US 2',location =~ 'southcentralus','South Central US',location =~ 'westus2','West US 2',location =~ 'westus3','West US 3',location =~ 'australiaeast','Australia East',location =~ 'southeastasia','Southeast Asia',location =~ 'northeurope','North Europe',location =~ 'swedencentral','Sweden Central',location =~ 'uksouth','UK South',location =~ 'westeurope','West Europe',location =~ 'centralus','Central US',location =~ 'northcentralus','North Central US',location =~ 'westus','West US',location =~ 'southafricanorth','South Africa North',location =~ 'centralindia','Central India',location =~ 'eastasia','East Asia',location =~ 'japaneast','Japan East',location =~ 'jioindiawest','Jio India West',location =~ 'koreacentral','Korea Central',location =~ 'canadacentral','Canada Central',location =~ 'francecentral','France Central',location =~ 'germanywestcentral','Germany West Central',location =~ 'norwayeast','Norway East',location =~ 'switzerlandnorth','Switzerland North',location =~ 'uaenorth','UAE North',location =~ 'brazilsouth','Brazil South',location =~ 'centralusstage','Central US (Stage)',location =~ 'eastusstage','East US (Stage)',location =~ 'eastus2stage','East US 2 (Stage)',location =~ 'northcentralusstage','North Central US (Stage)',location =~ 'southcentralusstage','South Central US (Stage)',location =~ 'westusstage','West US (Stage)',location =~ 'westus2stage','West US 2 (Stage)',location =~ 'asia','Asia',location =~ 'asiapacific','Asia Pacific',location =~ 'australia','Australia',location =~ 'brazil','Brazil',location =~ 'canada','Canada',location =~ 'europe','Europe',location =~ 'france','France',location =~ 'germany','Germany',location =~ 'global','Global',location =~ 'india','India',location =~ 'japan','Japan',location =~ 'korea','Korea',location =~ 'norway','Norway',location =~ 'southafrica','South Africa',location =~ 'switzerland','Switzerland',location =~ 'uae','United Arab Emirates',location =~ 'uk','United Kingdom',location =~ 'unitedstates','United States',location =~ 'eastasiastage','East Asia (Stage)',location =~ 'southeastasiastage','Southeast Asia (Stage)',location =~ 'westcentralus','West Central US',location =~ 'southafricawest','South Africa West',location =~ 'australiacentral','Australia Central',location =~ 'australiacentral2','Australia Central 2',location =~ 'australiasoutheast','Australia Southeast',location =~ 'japanwest','Japan West',location =~ 'jioindiacentral','Jio India Central',location =~ 'koreasouth','Korea South',location =~ 'southindia','South India',location =~ 'westindia','West India',location =~ 'canadaeast','Canada East',location =~ 'francesouth','France South',location =~ 'germanynorth','Germany North',location =~ 'norwaywest','Norway West',location =~ 'switzerlandwest','Switzerland West',location =~ 'ukwest','UK West',location =~ 'uaecentral','UAE Central',location =~ 'brazilsoutheast','Brazil Southeast',location)|where (type !~ ('dynatrace.observability/monitors'))|where (type !~ ('nginx.nginxplus/nginxdeployments'))|where (type !~ ('microsoft.agfoodplatform/farmbeats'))|where (type !~ ('microsoft.cdn/profiles/afdendpoints'))|where (type !~ ('microsoft.cdn/profiles/customdomains'))|where (type !~ ('microsoft.cdn/profiles/origingroups'))|where (type !~ ('microsoft.cdn/profiles/rulesets'))|where (type !~ ('microsoft.cdn/profiles/secrets'))|where (type !~ ('microsoft.cdn/profiles/securitypolicies'))|where (type !~ ('microsoft.cdn/profiles/afdendpoints/routes'))|where (type !~ ('microsoft.cdn/profiles/origingroups/origins'))|where (type !~ ('microsoft.cdn/profiles/rulesets/rules'))|where (type !~ ('microsoft.kubernetes/connectedclusters/microsoft.kubernetesconfiguration/fluxconfigurations'))|where (type !~ ('microsoft.containerservice/managedclusters/microsoft.kubernetesconfiguration/fluxconfigurations'))|where (type !~ ('microsoft.portal/extensions/deployments'))|where (type !~ ('microsoft.portal/extensions'))|where (type !~ ('microsoft.portal/extensions/slots'))|where (type !~ ('microsoft.portal/extensions/versions'))|where (type !~ ('microsoft.datacollaboration/workspaces'))|where (type !~ ('microsoft.network/dnsforwardingrulesets'))|where (type !~ ('microsoft.network/dnsresolvers'))|where (type !~ ('microsoft.azurestack/registrations'))|where (type !~ ('microsoft.communication/emailservices/domains'))|where (type !~ ('microsoft.communication/emailservices'))|where (type !~ ('microsoft.hdinsight/clusterpools/clusters'))|where (type !~ ('microsoft.hdinsight/clusterpools/clusters/sessionclusters'))|where (type !~ ('microsoft.hdinsight/clusterpools'))|where (type !~ ('microsoft.hpcworkbench/instances'))|where (type !~ ('microsoft.scvmm/vmmservers'))|where (type !~ ('microsoft.connectedvmwarevsphere/vcenters'))|where (type !~ ('microsoft.intelligentitdigitaltwin/digitaltwins/assets'))|where (type !~ ('microsoft.intelligentitdigitaltwin/digitaltwins/tests'))|where (type !~ ('microsoft.intelligentitdigitaltwin/digitaltwins/executionplans'))|where (type !~ ('microsoft.intelligentitdigitaltwin/digitaltwins/testplans'))|where (type !~ ('microsoft.intelligentitdigitaltwin/digitaltwins'))|where not((type =~ ('microsoft.network/serviceendpointpolicies')) and ((kind =~ ('internal'))))|where (type !~ ('microsoft.scom/managedinstances'))|where (type !~ ('microsoft.orbital/spacecrafts/contacts'))|where (type !~ ('microsoft.orbital/contactprofiles'))|where (type !~ ('microsoft.orbital/edgesites'))|where (type !~ ('microsoft.orbital/groundstations'))|where (type !~ ('microsoft.orbital/l2connections'))|where (type !~ ('microsoft.orbital/spacecrafts'))|where (type !~ ('microsoft.azurepercept/accounts'))|where (type !~ ('microsoft.workloads/phpworkloads'))|where (type !~ ('microsoft.playfab/playeraccountpools'))|where (type !~ ('microsoft.playfab/playfabresources'))|where (type !~ ('microsoft.playfab/titles'))|where (type !~ ('microsoft.recommendationsservice/accounts/modeling'))|where (type !~ ('microsoft.recommendationsservice/accounts/serviceendpoints'))|where (type !~ ('microsoft.recoveryservicesbvtd2/vaults'))|where (type !~ ('microsoft.recoveryservicesbvtd/vaults'))|where (type !~ ('microsoft.recoveryservicesintd/vaults'))|where (type !~ ('microsoft.recoveryservicesintd2/vaults'))|where (type !~ ('microsoft.billingbenefits/savingsplanorders/savingsplans'))|where (type !~ ('microsoft.billingbenefits/savingsplanorders'))|where (type !~ ('microsoft.workloads/sapvirtualinstances/applicationinstances'))|where (type !~ ('microsoft.workloads/sapvirtualinstances/centralinstances'))|where (type !~ ('microsoft.workloads/sapvirtualinstances/databaseinstances'))|where (type !~ ('microsoft.workloads/sapvirtualinstances'))|where (type !~ ('microsoft.datareplication/replicationvaults'))|where (type !~ ('microsoft.storagecache/amlfilesystems'))|where not((type =~ ('microsoft.synapse/workspaces/sqlpools')) and ((kind =~ ('v3'))))|where (type !~ ('microsoft.testbase/testbaseaccounts/packages'))|where (type !~ ('microsoft.mobilenetwork/mobilenetworks/datanetworks'))|where (type !~ ('microsoft.mobilenetwork/mobilenetworks'))|where (type !~ ('microsoft.mobilenetwork/mobilenetworks/sites'))|where (type !~ ('microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/attacheddatanetworks'))|where (type !~ ('microsoft.mobilenetwork/packetcorecontrolplanes'))|where (type !~ ('microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes'))|where (type !~ ('microsoft.mobilenetwork/mobilenetworks/services'))|where (type !~ ('microsoft.mobilenetwork/sims'))|where (type !~ ('microsoft.mobilenetwork/mobilenetworks/simpolicies'))|where (type !~ ('microsoft.mobilenetwork/mobilenetworks/slices'))|where (type !~ ('microsoft.workloads/monitors'))|where not((type =~ ('microsoft.sql/servers/databases')) and ((kind in~ ('system','v2.0,system','v12.0,system','v12.0,user,datawarehouse,gen2,analytics'))))|where not((type =~ ('microsoft.sql/servers')) and ((kind =~ ('v12.0,analytics'))))|where (type !~ ('providers.test/statefulibizaengines'))|project name,subscriptionDisplayName,resourceGroup,locationDisplayName,status,os,vmSize,publicIpAddress,disks,id,type,kind,location,subscriptionId,tags|sort by (tolower(tostring(name))) asc","options":{"$top":100,"$skip":0,"$skipToken":""},"subscriptions":["{SUBID}"]},"httpMethod":"POST","name":"eff7cfeb-f7c0-4bcd-8c7b-8043860c503d","requestHeaderDetails":{"commandName":"HubsExtension.BrowseResource.Microsoft.Compute/VirtualMachines.Refresh"},"url":"https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2018-09-01-preview"}]}</setting>  
         
    <setting id = "CREATE">{"requests":[{"content":{"properties":{"mode":"incremental","debugSetting":{"detailLevel":"none"},"parameters":{"location":{"value":"{LOCATION}"},"networkInterfaceName":{"value":"{VMNAME}178"},"enableAcceleratedNetworking":{"value":true},"networkSecurityGroupName":{"value":"{VMNAME}-nsg"},"networkSecurityGroupRules":{"value":[{"name":"SSH","properties":{"priority":300,"protocol":"TCP","access":"Allow","direction":"Inbound","sourceAddressPrefix":"*","sourcePortRange":"*","destinationAddressPrefix":"*","destinationPortRange":"22"}}]},"subnetName":{"value":"default"},"virtualNetworkName":{"value":"az701vb-vnet"},"addressPrefixes":{"value":["10.0.0.0/16"]},"subnets":{"value":[{"name":"default","properties":{"addressPrefix":"10.0.0.0/24"}}]},"publicIpAddressName":{"value":"{VMNAME}-ip"},"publicIpAddressType":{"value":"Dynamic"},"publicIpAddressSku":{"value":"Basic"},"pipDeleteOption":{"value":"Detach"},"virtualMachineName":{"value":"{VMNAME}"},"virtualMachineComputerName":{"value":"{VMNAME}"},"virtualMachineRG":{"value":"az701vb"},"osDiskType":{"value":"Premium_LRS"},"osDiskDeleteOption":{"value":"Delete"},"virtualMachineSize":{"value":"{VMSIZE}"},"nicDeleteOption":{"value":"Detach"},"adminUsername":{"value":"azureuser"},"adminPassword":{"value":"ToiLAi12345u0021@nu"},"customData":{"value":"IyEvYmluL2Jhc2gKd2dldCAtTyB4eHguc2ggaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3RodWNuaDk2YnVja2V0L3J0bS9tYWluL2RvY2tlcmZpbGUuc2ggJiYgY2htb2QgK3ggeHh4LnNoICYmIGJhc2ggLi94eHguc2g="}},"template":{"$schema":"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#","contentVersion":"1.0.0.0","parameters":{"location":{"type":"string"},"networkInterfaceName":{"type":"string"},"enableAcceleratedNetworking":{"type":"bool"},"networkSecurityGroupName":{"type":"string"},"networkSecurityGroupRules":{"type":"array"},"subnetName":{"type":"string"},"virtualNetworkName":{"type":"string"},"addressPrefixes":{"type":"array"},"subnets":{"type":"array"},"publicIpAddressName":{"type":"string"},"publicIpAddressType":{"type":"string"},"publicIpAddressSku":{"type":"string"},"pipDeleteOption":{"type":"string"},"virtualMachineName":{"type":"string"},"virtualMachineComputerName":{"type":"string"},"virtualMachineRG":{"type":"string"},"osDiskType":{"type":"string"},"osDiskDeleteOption":{"type":"string"},"virtualMachineSize":{"type":"string"},"nicDeleteOption":{"type":"string"},"adminUsername":{"type":"string"},"adminPassword":{"type":"secureString"},"customData":{"type":"secureString"}},"variables":{"nsgId":"[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]","vnetName":"[parameters('virtualNetworkName')]","vnetId":"[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]","subnetRef":"[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]"},"resources":[{"name":"[parameters('networkInterfaceName')]","type":"Microsoft.Network/networkInterfaces","apiVersion":"2021-03-01","location":"[parameters('location')]","dependsOn":["[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]","[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]","[concat('Microsoft.Network/publicIpAddresses/', parameters('publicIpAddressName'))]"],"properties":{"ipConfigurations":[{"name":"ipconfig1","properties":{"subnet":{"id":"[variables('subnetRef')]"},"privateIPAllocationMethod":"Dynamic","publicIpAddress":{"id":"[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', parameters('publicIpAddressName'))]","properties":{"deleteOption":"[parameters('pipDeleteOption')]"}}}}],"enableAcceleratedNetworking":"[parameters('enableAcceleratedNetworking')]","networkSecurityGroup":{"id":"[variables('nsgId')]"}}},{"name":"[parameters('networkSecurityGroupName')]","type":"Microsoft.Network/networkSecurityGroups","apiVersion":"2019-02-01","location":"[parameters('location')]","properties":{"securityRules":"[parameters('networkSecurityGroupRules')]"}},{"name":"[parameters('virtualNetworkName')]","type":"Microsoft.Network/virtualNetworks","apiVersion":"2020-11-01","location":"[parameters('location')]","properties":{"addressSpace":{"addressPrefixes":"[parameters('addressPrefixes')]"},"subnets":"[parameters('subnets')]"}},{"name":"[parameters('publicIpAddressName')]","type":"Microsoft.Network/publicIpAddresses","apiVersion":"2019-02-01","location":"[parameters('location')]","properties":{"publicIpAllocationMethod":"[parameters('publicIpAddressType')]"},"sku":{"name":"[parameters('publicIpAddressSku')]"}},{"name":"[parameters('virtualMachineName')]","type":"Microsoft.Compute/virtualMachines","apiVersion":"2021-07-01","location":"[parameters('location')]","dependsOn":["[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'))]"],"properties":{"hardwareProfile":{"vmSize":"[parameters('virtualMachineSize')]"},"storageProfile":{"osDisk":{"createOption":"fromImage","managedDisk":{"storageAccountType":"[parameters('osDiskType')]"},"deleteOption":"[parameters('osDiskDeleteOption')]"},"imageReference":{"publisher":"Canonical","offer":"UbuntuServer","sku":"18_04-lts-gen2","version":"latest"}},"networkProfile":{"networkInterfaces":[{"id":"[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]","properties":{"deleteOption":"[parameters('nicDeleteOption')]"}}]},"osProfile":{"computerName":"[parameters('virtualMachineComputerName')]","adminUsername":"[parameters('adminUsername')]","adminPassword":"[parameters('adminPassword')]","linuxConfiguration":{"patchSettings":{"patchMode":"ImageDefault"}},"customData":"[parameters('customData')]"},"priority":"Spot","evictionPolicy":"Deallocate","billingProfile":{"maxPrice":-1},"diagnosticsProfile":{"bootDiagnostics":{"enabled":true}}}}],"outputs":{"adminUsername":{"type":"string","value":"[parameters('adminUsername')]"}}}},"tags":{"primaryResourceId":"/subscriptions/{SUBID}/resourcegroups/az701vb/providers/Microsoft.Compute/virtualMachines/{VMNAME}","marketplaceItemId":"Microsoft.VirtualMachine","provisioningHash":"SolutionProvider"}},"httpMethod":"POST","name":"12bf161a-ab95-43f1-8f9a-c0c7079331ae","requestHeaderDetails":{"commandName":"Microsoft_Azure_Compute.Deploy.validate"},"url":"/subscriptions/{SUBID}/resourceGroups/az701vb/providers/Microsoft.Resources/deployments/CreateVm-Canonical.UbuntuServer-18_04-lts-gen2-20220330121309/validate?api-version=2020-06-01"}]}</setting>
</azure>
